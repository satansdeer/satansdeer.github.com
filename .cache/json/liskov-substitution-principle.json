{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/liskov-substitution-principle/index.md absPath of file >>> MarkdownRemark","html":"<p>In <strong>1988</strong> Barbara Liskov wrote something that now stands for <strong>L</strong> in <strong>SOLID</strong> principles. Let’s dive in and learn what is it and how does it relate to <strong>TDD</strong>.</p>\n<p>Here is the original formulation: _“If for each object <strong>o1</strong> of type <strong>S</strong> there is an object <strong>o2</strong> of type <strong>T</strong> such that for all programs <strong>P</strong> defined in terms of <strong>T</strong>, the behavior of <strong>P</strong> is unchanged when <strong>o1</strong> is substituted for <strong>o2</strong> then <strong>S</strong> is a subtype of <strong>T</strong>.“_</p>\n<p>Simply speaking: <em>“Derived class objects must be substitutable for the base class objects. That means objects of the derived class must behave in a manner consistent with the promises made in the base class contract.”</em></p>\n<p>Speaking even more simply: _“Derived class objects should <strong>complement</strong>, not <strong>substitute</strong> base class behavior.“_</p>\n<p><img src=\"/assets/images/liskov_1.png\" alt=\"liskov\"></p>\n<p>LSP can also be described as a counter-example of <a href=\"https://en.wikipedia.org/wiki/Duck_test\">Duck Test</a>: <em>“If it looks like a duck, quacks like a duck, but needs batteries – you probably have the wrong abstraction”</em></p>\n<h2>So, In Real World</h2>\n<p>If you have some class <strong>Foo</strong> and a derived class <strong>SubFoo</strong>, then if you change all the notions of <strong>Foo</strong> class to <strong>SubFoo</strong> – the program execution shouldn’t change, as <strong>SubFoo</strong> dosen’t change the <strong>Foo</strong> class functionality, and only extends it.</p>\n<h2>Let’s See The Example</h2>\n<p>Getting back to ducks. Let’s describe a <code class=\"language-text\">Duck</code>. We have very low expectations on it. We only expect it to be able to quack and nothing else.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Duck'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#quack'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'produces \"Quack\" sound'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> duck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Fine, now lets define the basic duck.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Duck initialization process</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Quack'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>We run the spec and it passes. Cool, now let’s create a derived class <code class=\"language-text\">MechanicalDuck</code>. It should also be able to quack. The only difference is that it needs batteries to operate.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MechanicalDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>battery<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_battery <span class=\"token operator\">=</span> battery<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_battery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token string\">'Need battery to operate.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Quack'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Now according to LSP, we should be able to safely change instances of base class to instances of derived class. Let’s change our spec a bit and try to use <code class=\"language-text\">MechanicalDuck</code> instead of <code class=\"language-text\">Duck</code>.</p>\n<p>Uh-oh, test failed. <code class=\"language-text\">MechanicalDuck</code> needs battery to quack. So <code class=\"language-text\">MechanicalDuck</code> here is clearly not a duck. Even though it’s interface might look similar, it’s <strong>behavior</strong> is totally different.</p>\n<h2>But What Would Be A Proper Subclass?</h2>\n<p>In our case it might be a <code class=\"language-text\">FemaleDuck</code>. Let’s implement it.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FemaleDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Initialization of female stuff</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_butt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemaleDuckButt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">layAnEgg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> egg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_butt<span class=\"token punctuation\">.</span><span class=\"token function\">layAnEgg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> egg<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">FemaleDuck</code> will successfully pass the duck test, as we didn’t change the behavior, but only extended it. Our duck can lay eggs, hurray!</p>","frontmatter":{"title":"Liskov Substitution Principle","date":"November 10, 2017"}}},"pathContext":{"slug":"/liskov-substitution-principle/","previous":{"fields":{"slug":"/dont-mock-what-you-dont-own/"},"frontmatter":{"title":"Don't Mock What You Don't Own"}},"next":{"fields":{"slug":"/open-closed-principle/"},"frontmatter":{"title":"Open/Closed Principle"}}}}