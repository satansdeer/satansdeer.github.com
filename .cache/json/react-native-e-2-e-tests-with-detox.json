{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/react-native-e2e-tests-with-detox/index.md absPath of file >>> MarkdownRemark","html":"<p>When you develop for web you have a lot of options to set up your e2e tests. <em>Protractor, CasperJS, PhantomJS, DalekJS</em> and a lot of others. That’s not the case in the world of mobile development. But worry not, I’m going to show you the best way (<strong>in my opinion</strong>) to test your application from <strong>users point of view</strong>.</p>\n<p>I think everyone will agree that having bugs is lame. Testing your application manually is also lame: it requires a lot of time, and you can forget to test certain scenarios or just overlook bugs.</p>\n<p>If only you could make robots do your job!</p>\n<h2>E2E Automation</h2>\n<p><img src=\"/assets/images/testing_pyramid.png\" alt=\"test pyramid\"></p>\n<p>Tests we are going to discuss here sit on top of the Martin Fowler’s <a href=\"https://martinfowler.com/bliki/TestPyramid.html\">Test Pyramid</a>. They are the slowest and most expensive to support. Every time you change any part of your system – you might break one of those. So as a rule of thumb <strong>keep them low</strong>. Test only required scenarios, and don’t use them to test things that can be tested with <strong>unit tests</strong>. </p>\n<p>But even though they are slow, expensive and brittle – it’s still much better than a meat-bag poking your app with his sausage fingers.</p>\n<h2>Real Example</h2>\n<p>I’m going to assume that you are using React Native, but AFAIK the setup and workflow won’t change much even if you write <strong>native apps</strong>.</p>\n<p>Make sure you have Node v6 or later and XCode 8 or later installed. I recommend to use <a href=\"https://www.npmjs.com/package/n\">n</a> to manage node versions. Also make sure to install <a href=\"https://yarnpkg.com/en/\">yarn</a>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn global add create-react-native-app\n$ create-react-native-app detox-e2e-tutorial\n$ cd detox-e2e-tutorial</code></pre>\n      </div>\n<p>These commands will install the <a href=\"https://github.com/react-community/create-react-native-app\">create-react-native-app</a> script and create the <code class=\"language-text\">detox-e2e-tutorial</code> project.</p>\n<p>Initially your newly created project is going to be run in <em>Expo app</em>. We want it to be <strong>truly</strong> native. So run the following command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn eject</code></pre>\n      </div>\n<p>It will ask you a couple of questions, here is how I answered them:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">? How would you like to eject from create-react-native-app? React Native: I&#39;d like a regular React Native project.\nWe have a couple of questions to ask you about how you&#39;d like to name your app:\n? What should your app appear as on a user&#39;s home screen? Detox E2E Tutorial\n? What should your Android Studio and Xcode projects be called? detoxe2etutorial</code></pre>\n      </div>\n<p>Let’s check that everything works:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn ios</code></pre>\n      </div>\n<p>It will start an app in simulator and also will run bundler in terminal (you can also run bundler manually with <code class=\"language-text\">yarn start</code>).</p>\n<p>You should see:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">Open up App.js to start working on your app!\nChanges you make will automatically reload.\nShake your phone to open the developer menu.</code></pre>\n      </div>\n<p>Great, let’s modify our <code class=\"language-text\">App.js</code> so we’ll have something to test.</p>\n<h2>Prepare The App</h2>\n<p>Open the <code class=\"language-text\">App.js</code> file in the root of your project and remove everything. Copy and paste the following contents there:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code class=\"language-html\">import React from 'react';\nimport { TouchableOpacity, StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      greeting: 'Welcome!'\n    }\n  }\n\n  render() {\n    return (\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.container}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.text}</span><span class=\"token punctuation\">></span></span>\n          {this.state.greeting}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TouchableOpacity</span> <span class=\"token attr-name\">testID</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>hello_button<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">onPress</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.onButtonPress.bind(this)}</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.button_text}</span><span class=\"token punctuation\">></span></span>Say Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TouchableOpacity</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>View</span><span class=\"token punctuation\">></span></span>\n    );\n  }\n\n  onButtonPress(greeting) {\n    this.setState({\n      greeting: 'Hello world!'\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 25,\n    marginBottom: 30\n  },\n  button_text: {\n    color: 'blue',\n    marginBottom: 20\n  }\n});</code></pre>\n      </div>\n<p>Open the app (run <code class=\"language-text\">yarn ios</code>). You should see text <em>Welcome!</em> and blue text <em>Say Hello</em>. Press that <em>Say Hello</em> thing. The top label should change text to <em>Hello world!</em>.</p>\n<p>This is super simple usage scenario, but it’s enough for our purposes. Let’s automate it.</p>\n<h2>Setup Detox</h2>\n<p>Even though there are other optons like Appium, I highly recommend <a href=\"https://github.com/wix/detox\">Detox</a>. Reasons are totally practical:</p>\n<ul>\n<li>It’s faster.</li>\n<li>It’s less flacky.</li>\n<li>It’s platform agnostic (you can test both iOS and Android)</li>\n<li>It works both with React Native and regular applications</li>\n<li>it has great documentation.</li>\n</ul>\n<p>Unlike other e2e solutions <em>Detox</em> uses <strong>gray box</strong> testing model. Which means that it has some knowledge about the system internals.</p>\n<p>And this is exactly why it’s a lot more fast and reliable. I’m not going to go in-depth here, go and read <a href=\"https://github.com/wix/detox/blob/master/docs/More.DesignPrinciples.md\">the documentation page explaining how Detox is different</a>.</p>\n<p>Let’s continue with setup. Make sure you have <a href=\"https://brew.sh/\">Homebrew</a> installed. Run:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ brew tap wix/brew\n$ brew install --HEAD applesimutils</code></pre>\n      </div>\n<p>This is <em>Detox</em> dependency that’s needed to control iPhone simulator.</p>\n<p>Now install <code class=\"language-text\">detox-cli</code> to be able to run <em>Detox</em> commands.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn global add detox-cli</code></pre>\n      </div>\n<p>And install <em>Detox</em> for your project:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn add --dev detox</code></pre>\n      </div>\n<p>Install some test-runner. I’m going to use <em>Jest</em>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn add --dev jest</code></pre>\n      </div>\n<p>Also add these lines to <code class=\"language-text\">scripts</code> block:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"test:e2e\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detox test -c ios.sim.debug\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"test:e2e:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detox build\"</span></code></pre>\n      </div>\n<p>Now create <code class=\"language-text\">e2e</code> folwer in your projects root and create file <code class=\"language-text\">init.js</code> with following contents:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> detox <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>detox<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set the default timeout</span>\njasmine<span class=\"token punctuation\">.</span>DEFAULT_TIMEOUT_INTERVAL <span class=\"token operator\">=</span> <span class=\"token number\">120000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> detox<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> detox<span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Also make <em>Detox</em> to run with <em>Jest</em>, add <code class=\"language-text\">config.json</code> file to <code class=\"language-text\">e2e</code> folder:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"setupTestFrameworkScriptFile\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./init.js\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>And add the following block to the <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"detox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"test-runner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"runner-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"e2e/config.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ios.sim.debug\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"binaryPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ios/build/Build/Products/Debug-iphonesimulator/detoxe2etutorial.app\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xcodebuild -project ios/detoxe2etutorial.xcodeproj -scheme detoxe2etutorial -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ios.simulator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"iPhone 7\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Phew, almost there. Let’s write our test.</p>\n<h2>First Test</h2>\n<p>First and the only. Our application is very simple so will be our test.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">reloadReactNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'allows to change label text to \"Hello world!\"'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello_button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Run the test:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">$ yarn test:e2e:build\n$ yarn test:e2e</code></pre>\n      </div>\n<h2>Congratulations</h2>\n<p>Now you can write user scenarios for your mobile applications. Go ahead and automate them all.</p>\n<p>Here is <a href=\"https://github.com/wix/detox/tree/master/docs\">Detox documentation index</a>, you’ll find all the needed info including matchers and expectation there.</p>","frontmatter":{"title":"React Native E2E Testing With Detox","date":"November 28, 2017"}}},"pathContext":{"slug":"/react-native-e2e-tests-with-detox/","previous":{"fields":{"slug":"/reducers-vs-transducers/"},"frontmatter":{"title":"Reducers VS Transducers"}},"next":{"fields":{"slug":"/react-native-mobx-tutorial/"},"frontmatter":{"title":"React Native Mobx Tutorial - Part 1"}}}}