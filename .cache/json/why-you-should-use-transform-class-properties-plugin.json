{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/why-you-should-use-transform-class-properties-plugin/index.md absPath of file >>> MarkdownRemark","html":"<p>In my <a href=\"http://maksimivanov.com/posts/react-modal-window\">previous post</a> I used pretty interesting syntax to define class methods for my <code class=\"language-text\">Popup</code> component. I was able to use arrow functions to change the scope of <code class=\"language-text\">this</code> to class level. Hmm, but it’s not actually Javascript, so how did I do that?</p>\n<p>First let’s refresh your memory, i’m talking about this code:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code class=\"language-html\">import React, { Component } from 'react';\nimport Popup from './Popup';\nimport SubscriptionForm from './SubscriptionForm';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n  }\n\n  openPopup = () => {\n    this.setState({\n      isOpen: true\n    });\n  }\n\n  closePopup = () => {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  render() {\n    return (\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.openPopup}</span><span class=\"token punctuation\">></span></span>\n          Click Me!\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Popup</span> <span class=\"token attr-name\">show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.state.isOpen}</span>\n          <span class=\"token attr-name\">onClose</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.closePopup}</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SubscriptionForm</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SubscriptionForm</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Popup</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    );\n  }\n}\n\nexport default App;</code></pre>\n      </div>\n<p>Look, at the <code class=\"language-text\">openPopup</code> for example. That <code class=\"language-text\">openPopup =</code> is exactly what <code class=\"language-text\">transform-class-properties</code> allowed me to do.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">openPopup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Also it allowed me to use arrow function here. If not it <code class=\"language-text\">this</code> in that function would reference global scope instead of the scope of <code class=\"language-text\">App</code> class. Probably I would get an error like <code class=\"language-text\">Uncaught TypeError: Property &#39;setState&#39; of object [object Object] is not a function</code>.</p>\n<h2>But What Are The Alternatives</h2>\n<p>More traditional and verbose approach would be to bind <code class=\"language-text\">this</code> manually. You can do this inside the <code class=\"language-text\">constructor</code> method.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>openPopup <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>openPopup<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closePopup <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closePopup<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>You have to do this for every funcion that will use <code class=\"language-text\">this</code> reference, and it’s very repetitive.</p>\n<h2>You Can Bind In Render Function</h2>\n<p>For example by using <code class=\"language-text\">bind(this)</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.openPopup.bind(this)}</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>Or by using arrow functions:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code class=\"language-html\">&lt;button onClick={e => this.openPopup(e)}></code></pre>\n      </div>\n<p>Both of these require additional hassle, look ugly and have performance implications as you basically reallocate the function on every render.</p>\n<h2>Summary</h2>\n<p>This is why you better use class level properties. And by the way there is a <a href=\"https://github.com/tc39/proposal-class-fields\">proposal about class fields</a> for future JS versions and it’s already <strong>Stage 3</strong>. That means that it’s very likely to become part of the language.</p>\n<p>If you are interested in learning new Javascript features (maybe even ones that are not included yet) – make sure to subscribe to my mailing list:</p>\n<p>\n  <div id=\"root\"></div>\n  <script type=\"text/javascript\" src=\"/assets/javascripts/bundle.js\" charset=\"utf-8\"></script>\n</p>","frontmatter":{"title":"Why Should You Use Transform Class Properties Plugin","date":"November 27, 2017"}}},"pathContext":{"slug":"/why-you-should-use-transform-class-properties-plugin/","previous":{"fields":{"slug":"/react-modal-window/"},"frontmatter":{"title":"Popup With ReactJS For Jekyll Blog"}},"next":{"fields":{"slug":"/reducers-vs-transducers/"},"frontmatter":{"title":"Reducers VS Transducers"}}}}