{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/react-state/index.md absPath of file >>> MarkdownRemark","html":"<p><code class=\"language-text\">state</code> in react is a plain javascript object used to manage data specific to some component. Keep in mind that only data that is going to be needed for rendering should belong to the state.</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#what_is_state\">What Is State</a></li>\n<li><a href=\"#differente_from_props\">Difference from Props</a></li>\n<li>\n<p><a href=\"#setting_initial_state\">Setting Initial State</a></p>\n<ul>\n<li><a href=\"#getinitialstate\">Using <code class=\"language-text\">getInitialState</code> method</a></li>\n<li><a href=\"#insideconstructor\">Inside <code class=\"language-text\">constructor</code> method</a></li>\n<li><a href=\"#asaclassprop\">As a class property</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#updating_state\">Updating State</a></p>\n<ul>\n<li><a href=\"#first_rule\">First Rule Of Updating State</a></li>\n<li><a href=\"#warning_async\">Warning, <code class=\"language-text\">setState</code> Is Asynchronous</a></li>\n<li><a href=\"#state_merged\">State Updates Are Merged</a></li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"what_is_state\"></a>What Is State</h2>\n<p>So basically <code class=\"language-text\">state</code> is a plain javascript object where component stores relevant data. The difference between <code class=\"language-text\">state</code> and any other object you can store inside your component is that React monitors it and will trigger re-render on <code class=\"language-text\">state</code> update.</p>\n<p>As state updates cause re-render – it makes sense to only store variables that are needed for rendering. So if you have some variable related to the component, but that you don’t use in your <code class=\"language-text\">render</code> method – it makes sense to just use it as a regular instance variable and not put it into <code class=\"language-text\">state</code>.</p>\n<p>Also, consider <code class=\"language-text\">state</code> as private to the component. So you can only access or update <code class=\"language-text\">state</code> from inside the component. You can’t access it from its parent nor from its children.</p>\n<h2><a name=\"differente_from_props\"></a>Difference From Props</h2>\n<p>Just like <code class=\"language-text\">props</code> – <code class=\"language-text\">state</code> is an object and it causes the component to re-render when updated. The difference is that <code class=\"language-text\">props</code> come from parent component and <code class=\"language-text\">state</code> is internal to the component.</p>\n<p>Also, you can’t update props inside component itself. Basically <code class=\"language-text\">props</code> come from outside and component has no control over it, and <code class=\"language-text\">state</code> is internal and component fully controls it.</p>\n<p>Here is the diagram:</p>\n<p><img src=\"/assets/images/state_vs_props.png\" alt=\"state vs props\"></p>\n<h2><a name=\"setting_initial_state\"></a>Setting Initial State</h2>\n<p>There are several methods of defining the initial state of your component.</p>\n<ul>\n<li><a href=\"#getinitialstate\">Using <code class=\"language-text\">getInitialState</code> method</a></li>\n<li><a href=\"#insideconstructor\">Inside <code class=\"language-text\">constructor</code> method</a></li>\n<li><a href=\"#asaclassprop\">As a class property</a></li>\n</ul>\n<h3><a name=\"getinitialstate\"></a>Using <code class=\"language-text\">getInitialState</code> Method</h3>\n<p>If you define your component using <code class=\"language-text\">React.createClass</code> – use <code class=\"language-text\">getInitialState</code>;</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ExampleComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someValue'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someKey<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ExampleComponent<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3><a name=\"insideconstructor\"></a>Inside <code class=\"language-text\">constructor</code> Method</h3>\n<p>If you define your component using <code class=\"language-text\">ES6</code> classes – define the <code class=\"language-text\">state</code> inside your <code class=\"language-text\">constructor</code> method:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someValue'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someKey<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ExampleComponent<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Keep in mind that in order for <code class=\"language-text\">this</code> to be defined in your <code class=\"language-text\">constructor</code> – you should call <code class=\"language-text\">super()</code> first. Also, don’t forget to accept <code class=\"language-text\">props</code> as an argument and pass it to <code class=\"language-text\">super</code> as well.</p>\n<h3><a name=\"asaclassprop\"></a>As a Class Property</h3>\n<p>Another option if you use <code class=\"language-text\">ES6</code> classes would be using class property. It allows you to write way less boilerplate:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someValue'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someKey<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ExampleComponent<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2><a name=\"updating_state\"></a>Updating State</h2>\n<p>There are several things to note about updating state:</p>\n<ul>\n<li><a href=\"#first_rule\">First Rule Of Updating State</a></li>\n<li><a href=\"#warning_async\">Warning, <code class=\"language-text\">setState</code> Is Asynchronous</a></li>\n<li><a href=\"#state_merged\">State Updates Are Merged</a></li>\n</ul>\n<h3><a name=\"first_rule\"></a>First Rule Of Updating State</h3>\n<p>And first rule of updating state is “Never tell anyone about updating state”, oh wait, it’s from somewhere else. First rule is – don’t update <code class=\"language-text\">state</code> directly:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// DON'T</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>someValueInState <span class=\"token operator\">=</span> <span class=\"token string\">'NEW VALUE'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>There is only one exception for setting state directly – you can define your initial state in your constructor</p>\n<p>In all other places <code class=\"language-text\">this.setState</code> instead.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>someValueInState<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW VALUE'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3><a name=\"warning_async\"></a>Warning, <code class=\"language-text\">setState</code> Is Asynchronous</h3>\n<p>Here are two things to note. First, don’t rely on <code class=\"language-text\">this.state</code> and <code class=\"language-text\">this.props</code> when calculating next state, as they might be updates asynchronously.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// DON'T</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>For such cases use the form of <code class=\"language-text\">setState</code> that accepts <code class=\"language-text\">function</code> instead of <code class=\"language-text\">object</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token punctuation\">:</span> prevState<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>And second thing – as <code class=\"language-text\">setState</code> updates state asynchronously – you cant rely on <code class=\"language-text\">this.state</code> immediately after calling <code class=\"language-text\">this.setState</code>.</p>\n<p>If you need some code to be executed only after state is really updated and all values are assigned – use callback provided by <code class=\"language-text\">this.setState</code>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someValue'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This will be executed only after state is really updated</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3><a name=\"state_merged\"></a>State Updates Are Merged</h3>\n<p>When you call setState(), React merges the object you provide into the current state. So you don’t have to worry about overriding values you don’t want to override.</p>\n<p>Imaging having some state with two fields defined in your constructor:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someValue'</span><span class=\"token punctuation\">,</span>\n    someOtherKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someOtherValue'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Now you can update them individually by calling <code class=\"language-text\">setState</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  someKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'someNewValue'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>In this example <code class=\"language-text\">this.state.someOtherKey</code> will remain unchanged.</p>\n<h2>Free React Course</h2>\n<p>I’m going to release the whole course about modern react. It will be completely free, subscribe to mailing list to not miss the day when it will be out 😀.</p>\n<p>{% include subscription_form.html %}</p>","frontmatter":{"title":"React 16 Course - Managing State","date":"March 22, 2018"}}},"pathContext":{"slug":"/react-state/","previous":{"fields":{"slug":"/gradient-coin-tutorial-part-2/"},"frontmatter":{"title":"CryptoKitties Clone Part 2 Adding An Auction"}},"next":{"fields":{"slug":"/gradient-coin-tutorial-part-3/"},"frontmatter":{"title":"CryptoKitties Clone Part 3 Adding Frontend"}}}}