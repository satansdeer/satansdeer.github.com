{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/react_lifecycle_methods/index.md absPath of file >>> MarkdownRemark","html":"<p>Like everything in existence â€“ react components follow their natural cycle of creation, existence and destruction. This article is part of <strong>WIP</strong> React 2018 course for beginners.</p>\n<h1>React Lifecycle Methods</h1>\n<p>Letâ€™s see what happens when you add your component to render tree.</p>\n<p>Overall we have 4 big phases in components life.</p>\n<ul>\n<li><a href=\"#initialization\">Initialization</a>,</li>\n<li><a href=\"#mounting\">Mounting</a></li>\n<li><a href=\"#update\">Update</a></li>\n<li><a href=\"#unmounting\">Unmounting</a></li>\n</ul>\n<p><img src=\"/assets/images/lifecycle.png\" alt=\"scheme\"></p>\n<p>In every phase there are several methods being called</p>\n<h2><a name=\"initialization\"></a>Initialization</h2>\n<p>First goes the <strong>initialization</strong> phase.</p>\n<p>And first one to be called is the <code class=\"language-text\">constructor</code> method. This is the place where you initialize your component, set your initial state, default props or bind <code class=\"language-text\">this</code> to functions that need it.\nDonâ€™t use this method for anything other than setting up your component. Please, no <code class=\"language-text\">AJAX</code> calls or reading/writing to database.</p>\n<h2><a name=\"mounting\"></a>Mounting</h2>\n<p>Initialization phase is followed by <strong>mounting</strong> phase.</p>\n<p>First method that gets executed in this phase is <code class=\"language-text\">componentWillMount</code> and its usage is mostly same as of <code class=\"language-text\">constructor</code> â€“ to set up initial state and default props. Warning, <code class=\"language-text\">componentWillMount</code> and other <code class=\"language-text\">componentWill...</code> methods are deprecated, use <code class=\"language-text\">componentDidMount</code> or <code class=\"language-text\">constructor</code> instead of this one.</p>\n<p>Next <code class=\"language-text\">render</code> method is executed. You are already familiar with this one. This method mounts component to DOM.</p>\n<p>After the component is mounted to DOM â€“ <code class=\"language-text\">componentDidMount</code> gets called. As this function is being executed only once in the whole lifecycle â€“ itâ€™s a good place to put your AJAX requests.</p>\n<h2><a name=\"update\"></a>Update</h2>\n<p>After <strong>mounting</strong> phase is completed â€“ component goes to <strong>update</strong> phase.</p>\n<p>First method to be called in this phase is <code class=\"language-text\">componentWillReceiveProps(newProps)</code>. This method is getting called every time props that are passed to this component get updated.\nThis method receives all the props so you can manually update your state depending on what props did change.\nWarning this method is deprecated along with most other <code class=\"language-text\">componentWill...</code> methods.</p>\n<p>Next is <code class=\"language-text\">shouldComponentUpdate(nextProps, nextState, nextContext)</code>. By default component gets updated every time props passed to it, itâ€™s state or its context gets changed. This method allows you to prevent unnecessary update by returning <code class=\"language-text\">false</code>.</p>\n<p>Then goes <code class=\"language-text\">componentWillUpdate(nextProps, nextState)</code>. Deprecated as a few other <code class=\"language-text\">componentWill...</code> methods.</p>\n<p>Then as in <strong>mounting</strong> phase, we have <code class=\"language-text\">render</code> method. </p>\n<p>After <code class=\"language-text\">render</code> method was executed successfully we have <code class=\"language-text\">componentDidUpdate</code> which you can use to perform AJAX calls and other side-effect causing operations.</p>\n<p>Since React 16 we have now have <code class=\"language-text\">componentDidCatch(errorString, errorInfo)</code> method. This method works similar to javascript <code class=\"language-text\">try/catch</code> block but for components. You can use this method in parent component to catch errors happened in its children. It receives to parameters</p>\n<ul>\n<li><code class=\"language-text\">errorString</code> â€“ the message of an error</li>\n<li><code class=\"language-text\">info</code> â€“ an object with a single field componentStack which represent the stack trace back to where the error occurred.</li>\n</ul>\n<p>Keep in mind that this method will only catch errors in the components below the parent in the tree. It wonâ€™t catch the errors happened in the component itself.</p>\n<h2><a name=\"unmounting\"></a>Unmounting</h2>\n<p>And the final phase of life of any react component is <strong>unmounting</strong> phase.</p>\n<p>There is only one method in this phase. Itâ€™s <code class=\"language-text\">componentWillUnmount</code> and this is the only one <code class=\"language-text\">compoenentWIll...</code> method that didnâ€™t get deprecated.</p>\n<p>This method is executed just before your component gets removed from the <strong>DOM</strong></p>\n<p>Use this method to clean up after your component. Remove all timers or listeners created during the lifetime of your component to prevent memory leaks.</p>\n<h2>Free React Course</h2>\n<p>Iâ€™m going to release the whole course about modern react. It will be completely free, subscribe to mailing list to not miss the day when it will be out ðŸ˜€.</p>\n<p>{% include subscription_form.html %}</p>","frontmatter":{"title":"React 16 Course - Component Lifecycle Methods","date":"March 11, 2018"}}},"pathContext":{"slug":"/react_lifecycle_methods/","previous":{"fields":{"slug":"/gradient-coin-tutorial/"},"frontmatter":{"title":"CryptoKitties Clone In 20 minutes. Non-fungible Token Tutorial"}},"next":{"fields":{"slug":"/javascript-type-system/"},"frontmatter":{"title":"Surviving The Javascript Type System"}}}}