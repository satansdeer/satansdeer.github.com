{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/gradient-coin-tutorial/index.md absPath of file >>> MarkdownRemark","html":"<p>If you’ve read previous articles about Ethereum DAPPs (<a href=\"http://maksimivanov.com/posts/ethereum-react-dapp-tutorial\">First</a>, <a href=\"http://maksimivanov.com/posts/ethereum-react-dapp-tutorial-part-2\">Second</a>) – you already have your very own <strong>ERC20</strong> compliant token. Today we’ll make ourselves familiar with <strong>ERC721</strong>.</p>\n<h2><a name='observables'></a>What Are We Going To Build</h2>\n<p>I think everyone has already heard about cryptokitties. A game based on Ethereum blockchain where you collect and breed adorable kittens:</p>\n<p><img src=\"/assets/images/cryptokitties.png\" alt=\"cryptokitties\"></p>\n<p>The game has huge success and a lot of kittens are sold for a crazy amount of money, like hundreds of thousands of dollars.<br>\nThe game is mostly open-source with a few exceptions (breeding and genetic algorithms).</p>\n<p>We’ll also do a collectible token but with way simpler logic. Our token won’t be able to breed, only you as an owner will be able to mint new tokens.</p>\n<p>You’ll learn how to create non fungible tokens, how to write tests for Ethereum contracts and how to connect them to js frontend.</p>\n<p>We’ll build a wallet for unique collectibles: gradient tokens. Every token will be represented as a unique css gradient and will look somewhat like this:</p>\n<p>\n<div style=\"display: inline-block; margin-right: 15px; width: 50px; height: 50px; border-radius: 50%; background: #FDF574; background: -webkit-radial-gradient(center,#FDF574,#D6A128); background: -o-radial-gradient(center,#FDF574,#D6A128); background: -moz-radial-gradient(center,#FDF574,#D6A128); background: radial-gradient(ellipse at center, #FDF574, #D6A128); box-shadow: 1px 8px 10px 0px rgba(50, 50, 50, 0.3);\"></div>\n<div style=\"display: inline-block; margin-right: 15px; width: 50px; height: 50px; border-radius: 50%; background: #86D935; background: -webkit-radial-gradient(center,#86D935,#538521); background: -o-radial-gradient(center,#86D935,#538521); background: -moz-radial-gradient(center,#86D935,#538521); background: radial-gradient(ellipse at center, #86D935, #538521); box-shadow: 1px 8px 10px 0px rgba(50, 50, 50, 0.3);\"></div>\n<div style=\"display: inline-block; margin-right: 15px; width: 50px; height: 50px; border-radius: 50%; background: #5C9AFF; background: -webkit-radial-gradient(center,#5C9AFF,#406EF8); background: -o-radial-gradient(center,#5C9AFF,#406EF8); background: -moz-radial-gradient(center,#5C9AFF,#406EF8); background: radial-gradient(ellipse at center, #5C9AFF, #406EF8); box-shadow: 1px 8px 10px 0px rgba(50, 50, 50, 0.3);\"></div>\n<div style=\"display: inline-block; margin-right: 15px; width: 50px; height: 50px; border-radius: 50%; background: #D33E2A; background: -webkit-radial-gradient(center,#D33E2A,#9F0604); background: -o-radial-gradient(center,#D33E2A,#9F0604); background: -moz-radial-gradient(center,#D33E2A,#9F0604); background: radial-gradient(ellipse at center, #D33E2A, #9F0604); box-shadow: 1px 8px 10px 0px rgba(50, 50, 50, 0.3);\"></div>\n<div style=\"display: inline-block; margin-right: 15px; width: 50px; height: 50px; border-radius: 50%; background: #B7CEF7; background: -webkit-radial-gradient(center,#B7CEF7,#8378FE); background: -o-radial-gradient(center,#B7CEF7,#8378FE); background: -moz-radial-gradient(center,#B7CEF7,#8378FE); background: radial-gradient(ellipse at center, #B7CEF7, #8378FE); box-shadow: 1px 8px 10px 0px rgba(50, 50, 50, 0.3);\"></div>\n</p>\n<p>You will be able to see the list of owned tokens and transfer them between wallets.</p>\n<p>In this tutorial I assume that you have basic knowledge about ReactJS and went though my previous tutorials about Ethereum contracts (<a href=\"http://maksimivanov.com/posts/ethereum-react-dapp-tutorial\">First</a>, <a href=\"http://maksimivanov.com/posts/ethereum-react-dapp-tutorial-part-2\">Second</a>)</p>\n<h2>Contents</h2>\n<ul>\n<li>\n<p>Part I</p>\n<ul>\n<li><a href=\"#erc721\">What Is ERC721</a></li>\n<li><a href=\"#truffle_suite\">Set Up The Truffle Suite</a></li>\n<li><a href=\"#creating_token\">Create The Token</a></li>\n<li><a href=\"#add_tests\">Add Tests</a></li>\n<li><a href=\"#minting\">Minting The Token</a></li>\n<li><a href=\"#more_tests\">Add More Tests</a></li>\n<li><a href=\"#fix_setup\">Fix The Setup</a></li>\n</ul>\n</li>\n<li>\n<p>Part II</p>\n<ul>\n<li>Adding the auction</li>\n</ul>\n</li>\n<li>\n<p>Part III</p>\n<ul>\n<li>Making the frontend</li>\n</ul>\n</li>\n</ul>\n<h2><a name='erc721'></a>What Is ERC721</h2>\n<p>ERC721 describes non-fungible token. Btw it is also knowns as <strong>NFT</strong>, which basically means exactly that (<strong>Non Fungible Token</strong>). Non-fungible means that every token is not equal to any other token. As opposite to ERC20 where all tokens are equal.</p>\n<p>Most known example of ERC721 is CryptoKitties, where each kitten is a token described by the ERC721 compliant contract with a bunch of additional functions.</p>\n<p>Most known example of ERC20, therefore, is any ICO, as 99% of them are based on ERC20 compliant Ethereum contracts.</p>\n<p>Unlike ERC20 you can’t just store amount of tokens in a wallet. Every token is unique so you have to store owner of each token instead.</p>\n<p>With NFT you want to know several things: </p>\n<ul>\n<li>How many tokens are in total? </li>\n<li>How many tokens are in this specific wallet?</li>\n<li>Who owns this specific token?</li>\n<li>What tokens are in this specific wallet?</li>\n</ul>\n<p>Also, you want to be able to do some actions like: </p>\n<ul>\n<li>Transfer token to the specific wallet</li>\n<li>Request token from the specific wallet</li>\n<li>Approve request from the specific wallet.</li>\n</ul>\n<p>This is it, ERC721 provides functions for all of that.</p>\n<h3>ERC721 Interface</h3>\n<p>So basically ERC721 describes ownership and requires following functions to be implemented:</p>\n<ul>\n<li><em>totalSupply()</em> - Total amount of emitted tokens.</li>\n<li><em>balanceOf( _owner )</em> - Amount of tokens in specific <code class=\"language-text\">_owner</code>’s wallet.</li>\n<li><em>ownerOf( _tokenId )</em> - Returns wallet address of the specific tokens owner.</li>\n<li><em>transfer( _to, _tokenId )</em> - Transfers token with <code class=\"language-text\">_tokenId</code> from senders wallet to specific wallet.</li>\n<li><em>takeOwnership( _tokenId )</em> - Claims the ownership of a given token ID</li>\n<li><em>approve( _to, _tokenId )</em> - Approves another address to claim for the ownership of the given token ID</li>\n</ul>\n<p>Also, it defines two events: <code class=\"language-text\">Transfer</code>, and <code class=\"language-text\">Approval</code>.</p>\n<h3>Zeppelin ERC721 Implementation</h3>\n<p>ERC721 compliant contract from <a href=\"https://github.com/OpenZeppelin/zeppelin-solidity\">Zeppelin-solidity</a> provides some additional useful functions:</p>\n<ul>\n<li><em>tokensOf( _owner )</em> - Returns list of token ID’s of specific <code class=\"language-text\">_owner</code></li>\n<li><em>approvedFor( _tokenId )</em> - Returns the approved address to take ownership of a given token ID</li>\n</ul>\n<h2><a name='truffle_suite'></a>Set Up The Truffle Suite</h2>\n<p>So to build our Gradient Token we’ll use Zeppelin’s ERC721 template and add one additional function to generate random gradient background upon token creation.</p>\n<p>Create a new project and initialize truffle there:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add global truffle\nmkdir gradient-token-tutorial\ncd gradient-token-tutorial\nyarn init\ntruffle init</code></pre>\n      </div>\n<p>Open your <code class=\"language-text\">truffle.js</code> and add set up the development network:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// See &lt;http://truffleframework.com/docs/advanced/configuration></span>\n  <span class=\"token comment\">// to customize your Truffle configuration!</span>\n  networks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    development<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token punctuation\">:</span> <span class=\"token number\">7545</span><span class=\"token punctuation\">,</span>\n      network_id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token comment\">// Match any network id</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2><a name='creating_token'></a>Create The Token</h2>\n<p>Install <code class=\"language-text\">zeppelin-solidity</code> and create our token contract:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add zeppelin-solidity\ntouch contracts/GradientToken.sol</code></pre>\n      </div>\n<p>Open <code class=\"language-text\">GradientToken.sol</code> and add following contents:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'zeppelin-solidity/contracts/ownership/Ownable.sol'</span><span class=\"token punctuation\">;</span>\n\ncontract GradientToken is ERC721Token<span class=\"token punctuation\">,</span> Ownable <span class=\"token punctuation\">{</span>\n  string <span class=\"token keyword\">public</span> constant name <span class=\"token operator\">=</span> <span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">;</span>\n  string <span class=\"token keyword\">public</span> constant symbol <span class=\"token operator\">=</span> <span class=\"token string\">\"GRAD\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Just defining the token for now.</p>\n<p>We inherited it from two contracts: <strong>ERC721Token</strong> to make it represent a non-fungible token, and from the <strong>Ownable</strong> contract.</p>\n<p><strong>Ownable</strong> allows managing authorization. It assigns ownership to deployer (when the contract is deployed) and adds <em>modifier</em> <strong>onlyOwner</strong> that allows you to restrict certain methods only to contract owner. Also, you can transfer ownership.</p>\n<p>Add the <code class=\"language-text\">2_deploy_contract.js</code> migration to <code class=\"language-text\">migrations</code> folder:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> GradientToken <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>deployer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    deployer<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>GradientToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>We add the index in the beginning of migrations name so truffle can tract successful migrations and not run them twice.</p>\n<p>Run the local ethereum network, I recommend to use ganache:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add global ganache-cli\nganache-cli -p 7545</code></pre>\n      </div>\n<h2><a name='add_tests'></a>Add Tests</h2>\n<p>Truffle uses <code class=\"language-text\">Mocha</code> as a testing framework, with one additional scope: <code class=\"language-text\">contract()</code>.</p>\n<p><code class=\"language-text\">contract()</code> is very similar to <code class=\"language-text\">describe()</code> but it provides some additional features:</p>\n<ul>\n<li>Before each <code class=\"language-text\">contract()</code> block you contract are re-deployed to Ethereum network. So you have clean contract state.</li>\n<li>It provides a list of <code class=\"language-text\">accounts</code> that you can use to write tests.</li>\n</ul>\n<p>Truffle uses <code class=\"language-text\">Chai</code> as assertion framework, you can check the documentation <a href=\"chaijs.com/api/\">here</a></p>\n<p>Create <code class=\"language-text\">GradientTokenTest.js</code> in <code class=\"language-text\">/test</code> directory and add following content:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> GradientToken <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">contract</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gradient token\"</span><span class=\"token punctuation\">,</span> accounts <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Should make first account an owner\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> GradientToken<span class=\"token punctuation\">.</span><span class=\"token function\">deployed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> owner <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Note that we first require the <code class=\"language-text\">GradientToken</code> artifact. Which is <code class=\"language-text\">json</code> representation of your token interface. This is the thing that allows you to interact with your contract from javascript code.</p>\n<p>This test is unnecessary as this functionality is already tested by the <code class=\"language-text\">Ownable</code> tests in zeppelin library. I’ve added it only for quick demonstration.</p>\n<p>Here we run the <code class=\"language-text\">contract</code> block, that deploys our contract. We wait for the contract to be deployed and request <code class=\"language-text\">owner()</code> which returns owners address. Then we assert that owners address is the same as <code class=\"language-text\">account[0]</code></p>\n<p>When you deploy contracts your first contract will usually be the deployer.</p>\n<p>Run the test:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle test</code></pre>\n      </div>\n<p><img src=\"/assets/images/grad_first_test.png\" alt=\"first test\"></p>\n<p>The test should pass.</p>\n<h2><a name='erc721'></a>Add More Functionality</h2>\n<p>We want to have a gradient associated with every token. We’ll use circular gradients represented by two colors.</p>\n<p>Solidity allows you to define new types of data in form of structs.</p>\n<p>Let’s define a struct that will store our gradient representation:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">struct Gradient <span class=\"token punctuation\">{</span>\n  string outer<span class=\"token punctuation\">;</span>\n  string inner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Our <code class=\"language-text\">Gradient</code> struct contains two <code class=\"language-text\">string</code> type fields. Structs in solidity can have other structs as fields, but It is not possible for a struct to contain a member of its own type. This restriction is necessary, as the size of the struct has to be finite.</p>\n<p>Now let’s define an array of gradients.</p>\n<p>In solidity there are two types of arrays: fixed and dynamic. For fixed arrays you should define their length.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">string<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> rainbowColorsArray<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>We don’t know yet how many gradients do we want to create, so let’s define <code class=\"language-text\">dynamic</code> array:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">Gradient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> gradients<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3><a name=\"minting\"></a>Minting Gradient Tokens</h3>\n<p>We want to allow contract owner to mint new <strong>GradientTokens</strong>, let’s define the following function:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mint</span><span class=\"token punctuation\">(</span>string _outer<span class=\"token punctuation\">,</span> string _inner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> onlyOwner<span class=\"token punctuation\">{</span>\n  Gradient memory _gradient <span class=\"token operator\">=</span> <span class=\"token function\">Gradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> outer<span class=\"token punctuation\">:</span> _outer<span class=\"token punctuation\">,</span> inner<span class=\"token punctuation\">:</span> _inner <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uint _gradientId <span class=\"token operator\">=</span> gradients<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_gradient<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _gradientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>First we define an in memory <code class=\"language-text\">_gradient</code> varibale. In memory means that lifespan of this variable will be limited by the execution scope.</p>\n<p>There are 3 ways of storing data in Solidity:</p>\n<ul>\n<li>Storage - This is most serious and expensive one. The data will be pesisted between contract function calls.</li>\n<li>Memory - This one is cheaper. Variable will be erased between function calls.</li>\n<li>Stack - This is only for small local variables like <code class=\"language-text\">uint</code> or <code class=\"language-text\">string</code></li>\n</ul>\n<p>By default <code class=\"language-text\">stack</code> is being used. Theere are only two data types you can control kind of storage: ‘Struct’ and <code class=\"language-text\">Array</code>.</p>\n<p>In our case we need this variable only temporarily se we used <code class=\"language-text\">memory</code> storage.</p>\n<p>Then we defined <code class=\"language-text\">_gradientId</code> by getting new length of the <code class=\"language-text\">gradients</code> array (the <code class=\"language-text\">push</code> method returns the new length) minus one, so we start from zero.</p>\n<p>Finally we call the <code class=\"language-text\">_mint</code> method that we got from <code class=\"language-text\">ERC721Token</code> that we inherit.</p>\n<p>This method is internal and it does the following:</p>\n<ol>\n<li>Checks that the recipient address is valid (not 0), otherwize throws an error</li>\n<li>Creates a token and assigns it an owner.</li>\n<li>Fires <code class=\"language-text\">Transfer</code> event.</li>\n</ol>\n<h3>Getting Gradient Info</h3>\n<p>Cool, now let’s add a method that will allow us to get gradient data associated with specific token:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getGradient</span><span class=\"token punctuation\">(</span> uint _gradientId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> view <span class=\"token function\">returns</span><span class=\"token punctuation\">(</span>string outer<span class=\"token punctuation\">,</span> string inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  Gradient memory _grad <span class=\"token operator\">=</span> gradients<span class=\"token punctuation\">[</span>_gradientId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  outer <span class=\"token operator\">=</span> _grad<span class=\"token punctuation\">.</span>outer<span class=\"token punctuation\">;</span>\n  inner <span class=\"token operator\">=</span> _grad<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This function is also <code class=\"language-text\">public</code>, also we define it as <code class=\"language-text\">view</code> basically promising to only <strong>VIEW</strong> stuff and not modify the state.</p>\n<p>We defined temporary <code class=\"language-text\">memory</code> variable <code class=\"language-text\">_grad</code> that we got from our <code class=\"language-text\">gradients</code> array by requested <code class=\"language-text\">_gradientId</code>.</p>\n<p>Then finally we define the return values <code class=\"language-text\">outer</code> and <code class=\"language-text\">inner</code>. They will be returned as an array.</p>\n<h2><a name=\"more_tests\"></a>Add More Tests</h2>\n<p>At this point your contract should look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'zeppelin-solidity/contracts/ownership/Ownable.sol'</span><span class=\"token punctuation\">;</span>\n\ncontract GradientToken is ERC721Token<span class=\"token punctuation\">,</span> Ownable <span class=\"token punctuation\">{</span>\n  string <span class=\"token keyword\">public</span> constant name <span class=\"token operator\">=</span> <span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">;</span>\n  string <span class=\"token keyword\">public</span> constant symbol <span class=\"token operator\">=</span> <span class=\"token string\">\"GRAD\"</span><span class=\"token punctuation\">;</span>\n\n  struct Gradient <span class=\"token punctuation\">{</span>\n    string outer<span class=\"token punctuation\">;</span>\n    string inner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Gradient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> gradients<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getGradient</span><span class=\"token punctuation\">(</span> uint _gradientId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> view <span class=\"token function\">returns</span><span class=\"token punctuation\">(</span>string outer<span class=\"token punctuation\">,</span> string inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Gradient memory _grad <span class=\"token operator\">=</span> gradients<span class=\"token punctuation\">[</span>_gradientId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    outer <span class=\"token operator\">=</span> _grad<span class=\"token punctuation\">.</span>outer<span class=\"token punctuation\">;</span>\n    inner <span class=\"token operator\">=</span> _grad<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">mint</span><span class=\"token punctuation\">(</span>string _outer<span class=\"token punctuation\">,</span> string _inner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> payable onlyOwner<span class=\"token punctuation\">{</span>\n    Gradient memory _gradient <span class=\"token operator\">=</span> <span class=\"token function\">Gradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> outer<span class=\"token punctuation\">:</span> _outer<span class=\"token punctuation\">,</span> inner<span class=\"token punctuation\">:</span> _inner <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint _gradientId <span class=\"token operator\">=</span> gradients<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_gradient<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _gradientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Let’s test the <code class=\"language-text\">mint</code> function, add the following test:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mint\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"creates token with specified outer and inner colors\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> GradientToken<span class=\"token punctuation\">.</span><span class=\"token function\">deployed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> owner <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">mint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ff00dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#ddddff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">tokensOf</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> gradients <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">getGradient</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>gradients<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"#ff00dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#ddddff\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This test is simple but it tests two things at once. First we test that we can mint new token with. Then we expect that current account has now that token, and we assert it using that <code class=\"language-text\">getGradient</code> function that we created before.</p>\n<p>Now it’s time to test if only the contract owner can mint new tokens. Add following test to <code class=\"language-text\">mint</code> block:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allows to mint only to owner\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> GradientToken<span class=\"token punctuation\">.</span><span class=\"token function\">deployed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> other <span class=\"token operator\">=</span> accounts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">transferOwnership</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">assertRevert</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">mint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ff00dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#ddddff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Here we used assertRevert to make sure that mint function would throw error. But we forgot to import it.</p>\n<p>Add import statement in the beginning of file:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> assertRevert <span class=\"token keyword\">from</span> <span class=\"token string\">\"zeppelin-solidity/test/helpers/assertRevert\"</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Ok, now it won’t run. You can just use <code class=\"language-text\">import</code> in your tests.</p>\n<h2><a name=\"fix_setup\"></a>Fix The Setup</h2>\n<p>Now as we run our code in <code class=\"language-text\">node</code> environment you need to install a few packages to be able to use <code class=\"language-text\">import</code> statement:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add babel-polyfill babel-preset-es2015 babel-preset-stage-2 babel-preset-stage-3 babel-register babel-preset-env</code></pre>\n      </div>\n<p>Add the following to your <code class=\"language-text\">.babelrc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>And this to your <code class=\"language-text\">truffle.js</code> file:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-register\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  ignore<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules\\/(?!zeppelin-solidity)/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-polyfill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Add it before the <code class=\"language-text\">module.exports</code>.</p>\n<p>Try to run the tests:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle test</code></pre>\n      </div>\n<p><img src=\"/assets/images/gradient_token_tests_working.png\" alt=\"working tests\"></p>\n<p>Now it should work.</p>","frontmatter":{"title":"CryptoKitties Clone In 20 minutes. Non-fungible Token Tutorial","date":"March 04, 2018"}}},"pathContext":{"slug":"/gradient-coin-tutorial/","previous":{"fields":{"slug":"/firebase-react-tutorial/"},"frontmatter":{"title":"Firebase React Authentication Tutorial"}},"next":{"fields":{"slug":"/react_lifecycle_methods/"},"frontmatter":{"title":"React 16 Course - Component Lifecycle Methods"}}}}