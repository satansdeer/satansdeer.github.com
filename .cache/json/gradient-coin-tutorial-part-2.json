{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/gradient-coin-tutorial-part-2/index.md absPath of file >>> MarkdownRemark","html":"<p>In <a href=\"http://maksimivanov.com/posts/gradient-coin-tutorial\">last part</a> we created our own non-fungible token. For the sake of simplicity, we didn’t create as many fields as CryptoKitties have and went with just 2. Inner and outer color of our GradientToken. In this part, we’ll add an auction to be able to trade them.</p>\n<h2>How Will It Work</h2>\n<p>We’ll use a separate contract to manage trading of our GradientToken. It will have the following interface:</p>\n<ul>\n<li><code class=\"language-text\">createAuction(_tokenId, _price, _seller)</code> - creates new auction. Transfers the token to itself until the auction is ended.</li>\n<li><code class=\"language-text\">bid(_tokenId)</code> - bids, if everything is fine and the size of the bid was bigger than auction price – transform token to buyer and money to the seller.</li>\n<li><code class=\"language-text\">cancelAuction(_tokenId)</code> - cancels the auction, returns token to original owner.</li>\n</ul>\n<p>So when you want to sell your token - you create an auction and then it waits for the successful bid or for cancel.</p>\n<h3>Create The Auction Contract</h3>\n<p>Create file <code class=\"language-text\">TokenAuction.sol</code> in your <code class=\"language-text\">contracts</code> folder. It should have the following content:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"zeppelin-solidity/contracts/token/ERC721/ERC721.sol\"</span><span class=\"token punctuation\">;</span>\n\ncontract TokenAuction <span class=\"token punctuation\">{</span>\n  ERC721 <span class=\"token keyword\">public</span> nonFungibleContract<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">TokenAuction</span><span class=\"token punctuation\">(</span>address _nftAddress<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    nonFungibleContract <span class=\"token operator\">=</span> <span class=\"token function\">ERC721</span><span class=\"token punctuation\">(</span>_nftAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Here we imported an <code class=\"language-text\">ERC721</code> token interface from <code class=\"language-text\">zeppelin-solidity</code> lib and defined a contract that accepts <strong>non-fungible token</strong> address and assigns it to a public variable <code class=\"language-text\">nonFungibleContract</code>.</p>\n<p>We need to have a reference to the <strong>non-fungible token</strong> contract to be able to call it’s methods, like <code class=\"language-text\">transfer</code>.</p>\n<p>Let’s add a test to check if it assigns the address successfully. Create file <code class=\"language-text\">TokenAuctionTest.js</code> in <code class=\"language-text\">test</code> folder:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> GradientToken <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> TokenAuction <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TokenAuction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">contract</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auction\"</span><span class=\"token punctuation\">,</span> accounts <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Should accept nft on creation\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nft <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> GradientToken<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> auction <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> TokenAuction<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>nft<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nftAddr <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> auction<span class=\"token punctuation\">.</span><span class=\"token function\">nonFungibleContract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>nftAddr<span class=\"token punctuation\">,</span> nft<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Run the tests:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle test test/TokenAuctionTest.js</code></pre>\n      </div>\n<h3>Making Auctions</h3>\n<p>We need to be able to create new auctions using <code class=\"language-text\">tokenId</code> and <code class=\"language-text\">price</code>. Let’s define a method for it and required variables.</p>\n<p>For every auction we need to store required price and seller address. Let’s define a data type for our auctions, add this to your <code class=\"language-text\">TokenAuction</code> contract:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">struct Auction <span class=\"token punctuation\">{</span>\n  address seller<span class=\"token punctuation\">;</span>\n  uint128 price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Every auction should be associated with specific token, define a mapping:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">mapping</span> <span class=\"token punctuation\">(</span>uint256 <span class=\"token operator\">=></span> Auction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> tokenIdToAuction<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>We made it <code class=\"language-text\">public</code> so Solidity will automatically generate getter for it.</p>\n<p>Now we can define a function that will take ownership of the token and create an associated auction:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAuction</span><span class=\"token punctuation\">(</span> uint256 _tokenId<span class=\"token punctuation\">,</span> uint128 _price <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n  nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">takeOwnership</span><span class=\"token punctuation\">(</span>_tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Auction memory _auction <span class=\"token operator\">=</span> <span class=\"token function\">Auction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     seller<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span>\n     price<span class=\"token punctuation\">:</span> <span class=\"token function\">uint128</span><span class=\"token punctuation\">(</span>_price<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _auction<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>First, this function calls the <code class=\"language-text\">ERC721</code> method <code class=\"language-text\">takeOwnership</code>. This method transfers ownership if the transfer was approved for a specific contract. You can approve transfer using <code class=\"language-text\">approve</code> method. </p>\n<p>Then we create a new instance of our <code class=\"language-text\">Auction</code> and assign it to temporal in-memory variable <code class=\"language-text\">_auction</code>. And finally, we make a mapping of this auction to our <code class=\"language-text\">_tokenId</code>.</p>\n<p>By this moment your <code class=\"language-text\">TokenAuction.sol</code> should look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"zeppelin-solidity/contracts/token/ERC721/ERC721.sol\"</span><span class=\"token punctuation\">;</span>\n\ncontract TokenAuction <span class=\"token punctuation\">{</span>\n  ERC721 <span class=\"token keyword\">public</span> nonFungibleContract<span class=\"token punctuation\">;</span>\n\n  struct Auction <span class=\"token punctuation\">{</span>\n    address seller<span class=\"token punctuation\">;</span>\n    uint128 price<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mapping</span> <span class=\"token punctuation\">(</span>uint256 <span class=\"token operator\">=></span> Auction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> tokenIdToAuction<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">TokenAuction</span><span class=\"token punctuation\">(</span> address _nftAddress <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    nonFungibleContract <span class=\"token operator\">=</span> <span class=\"token function\">ERC721</span><span class=\"token punctuation\">(</span>_nftAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createAuction</span><span class=\"token punctuation\">(</span> uint256 _tokenId<span class=\"token punctuation\">,</span> uint128 _price <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">takeOwnership</span><span class=\"token punctuation\">(</span>_tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Auction memory _auction <span class=\"token operator\">=</span> <span class=\"token function\">Auction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       seller<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span>\n       price<span class=\"token punctuation\">:</span> <span class=\"token function\">uint128</span><span class=\"token punctuation\">(</span>_price<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _auction<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Let’s add tests for this function. We want to check that <code class=\"language-text\">TokenAuction</code> claims the ownership of the token and that it creates an auction associated with that token.</p>\n<p>Add the following block to your <code class=\"language-text\">test/TokenAuctionTest.js</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">describe(&quot;createAuction&quot;, () =&gt; {\n  let nft, auctionContract, tokens;\n\n  before(async () =&gt; {\n    nft = await GradientToken.new();\n    auctionContract = await TokenAuction.new(nft.address);\n\n    await nft.mint(&quot;#ff00dd&quot;, &quot;#ddddff&quot;);\n    tokens = await nft.tokensOf(accounts[0]);\n\n    await nft.approve(auctionContract.address, tokens[0]);\n    await auctionContract.createAuction(tokens[0], 100);\n  });\n\n  it(&quot;Should take ownership of a token&quot;, async () =&gt; {\n    const tokenOwner = await nft.ownerOf(tokens[0]);\n    assert.equal(tokenOwner, auctionContract.address);\n  });\n\n  it(&quot;Should create new auction&quot;, async () =&gt; {\n    const auction = await auctionContract.tokenIdToAuction(tokens[0]);\n    assert.equal(auction[0], accounts[0]);\n    assert.equal(auction[1].toNumber(), 100);\n  });\n});</code></pre>\n      </div>\n<p>In it’s <code class=\"language-text\">before</code> block we initialize our contracts, mint new <code class=\"language-text\">GradientToken</code>, approve it for transferring to auction and then call the <code class=\"language-text\">createAuction</code> method. Two <code class=\"language-text\">it</code> blocks check that token ownership was transferred successfully and that auction was created and is stored in <code class=\"language-text\">tokenIdToAuction</code> map respectively.</p>\n<h3>Making Bid</h3>\n<p>Ok, we are done with creating auctions – let’s add the <code class=\"language-text\">bid</code> method.</p>\n<p>This method should check if bid value is bigger or equal to auction price and if yes – transfer token to new owner and remove auction.</p>\n<p>Add this function to <code class=\"language-text\">contracts/TokenAuction.sol</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span> uint256 _tokenId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> payable <span class=\"token punctuation\">{</span>\n  Auction memory auction <span class=\"token operator\">=</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>auction<span class=\"token punctuation\">.</span>seller <span class=\"token operator\">!=</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> auction<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  address seller <span class=\"token operator\">=</span> auction<span class=\"token punctuation\">.</span>seller<span class=\"token punctuation\">;</span>\n  uint128 price <span class=\"token operator\">=</span> auction<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  seller<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Let’s go line by line. First, we get the auction representation from our <code class=\"language-text\">tokenIdToAuction</code> map. Then we check that auction seller is non-zero address. It’s needed because of how solidity maps work. If there would no <code class=\"language-text\">auction</code> by that id – it would still return the struct, but all the values would be zero.</p>\n<p>Then we check if <code class=\"language-text\">msg.value</code> is bigger or equal to the <code class=\"language-text\">auction.price</code>. Our function has <code class=\"language-text\">payable</code> modifier that allows this function to receive money. The received amount can be accessed through <code class=\"language-text\">msg.value</code></p>\n<p>After that we temporarily save seller address and price and remove the auction, preventing further bids to it. Then we transfer money to the seller and transfer the <code class=\"language-text\">nft</code> to the bidder.</p>\n<h3>Canceling Auction</h3>\n<p>Ok, we can make auctions and bid, time to add function to cancel auctions.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span> uint256 _tokenId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n  Auction memory auction <span class=\"token operator\">=</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>auction<span class=\"token punctuation\">.</span>seller <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Here we also load the auction but now we don’t need to check that <code class=\"language-text\">auction.seller</code> is non-zero because we check if it’s equal to <code class=\"language-text\">msg.sender</code> anyway. We want only auction creator to be able to cancel auctions.</p>\n<p>Then we delete the auction and send the token back to the seller (which is <code class=\"language-text\">msg.sender</code> in our case).</p>\n<p>If you followed the tutorial your <code class=\"language-text\">contracts/TokenAuction.sol</code> should look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"zeppelin-solidity/contracts/token/ERC721/ERC721.sol\"</span><span class=\"token punctuation\">;</span>\n\ncontract TokenAuction <span class=\"token punctuation\">{</span>\n  ERC721 <span class=\"token keyword\">public</span> nonFungibleContract<span class=\"token punctuation\">;</span>\n\n  struct Auction <span class=\"token punctuation\">{</span>\n    address seller<span class=\"token punctuation\">;</span>\n    uint128 price<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mapping</span> <span class=\"token punctuation\">(</span>uint256 <span class=\"token operator\">=></span> Auction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> tokenIdToAuction<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">TokenAuction</span><span class=\"token punctuation\">(</span> address _nftAddress <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    nonFungibleContract <span class=\"token operator\">=</span> <span class=\"token function\">ERC721</span><span class=\"token punctuation\">(</span>_nftAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createAuction</span><span class=\"token punctuation\">(</span> uint256 _tokenId<span class=\"token punctuation\">,</span> uint128 _price <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">takeOwnership</span><span class=\"token punctuation\">(</span>_tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Auction memory _auction <span class=\"token operator\">=</span> <span class=\"token function\">Auction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       seller<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span>\n       price<span class=\"token punctuation\">:</span> <span class=\"token function\">uint128</span><span class=\"token punctuation\">(</span>_price<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _auction<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bid</span><span class=\"token punctuation\">(</span> uint256 _tokenId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> payable <span class=\"token punctuation\">{</span>\n    Auction memory auction <span class=\"token operator\">=</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>auction<span class=\"token punctuation\">.</span>seller <span class=\"token operator\">!=</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> auction<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    address seller <span class=\"token operator\">=</span> auction<span class=\"token punctuation\">.</span>seller<span class=\"token punctuation\">;</span>\n    uint128 price <span class=\"token operator\">=</span> auction<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    seller<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span> uint256 _tokenId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    Auction memory auction <span class=\"token operator\">=</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>auction<span class=\"token punctuation\">.</span>seller <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> tokenIdToAuction<span class=\"token punctuation\">[</span>_tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    nonFungibleContract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _tokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>Yay, We Have An Auction</h3>\n<p>You can check out the code related to this tutorial <a href=\"https://github.com/satansdeer/gradient-token-tutorial\">here</a></p>\n<p>In next chapter, we’ll add frontend and have a fully functional game on ethereum network.</p>","frontmatter":{"title":"CryptoKitties Clone Part 2 Adding An Auction","date":"March 19, 2018"}}},"pathContext":{"slug":"/gradient-coin-tutorial-part-2/","previous":{"fields":{"slug":"/javascript-type-system/"},"frontmatter":{"title":"Surviving The Javascript Type System"}},"next":{"fields":{"slug":"/react-state/"},"frontmatter":{"title":"React 16 Course - Managing State"}}}}