{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/reducers-vs-transducers/index.md absPath of file >>> MarkdownRemark","html":"<p>Sweet chunk of functional paradigm for you today. I don’t know why did I write “versus” while they compliment each other. Anyway, let’s get to the good stuff…</p>\n<h2>Reducers</h2>\n<p>Simply speaking a <code class=\"language-text\">Reducer</code> is a function that takes an accumulation and a value, and then returns a new accumulation.</p>\n<p><img src=\"/assets/images/reducers_vs_transducers_1.png\" alt=\"reducers\"></p>\n<p>You are already familiar with reducers if you’ve used the <code class=\"language-text\">Array.prototype.reduce()</code> method. The <code class=\"language-text\">.reduce()</code> function itself is not a reducer!\nIt iterates over a collection and passes values to it’s “callback” that is a <strong>reducer</strong> here.</p>\n<p>Let’s imagine that we have an array with five numbers: <code class=\"language-text\">[1, 2, 3, 14, 21]</code> and we want to find the biggest of them.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> biggestNumber <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 21</span></code></pre>\n      </div>\n<p>The arrow function here is a reducer. The <code class=\"language-text\">.reduce()</code> method only takes the result of previous reduction and calls the reducer with it and next element of an array.</p>\n<p>Reducers can work with any kinds of values. The only rule is that the accumulation you return should have the same type that the accumulation you pass in.</p>\n<p>For example you can easily create a reducer that will work with strings:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> folders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'usr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> folders<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accumulator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Here I passed empty string as an initial value</span>\n\n<span class=\"token comment\">// /usr/var/bin</span></code></pre>\n      </div>\n<p>Actually it’s better to illustrate without <code class=\"language-text\">Array.reduce()</code> method. Look:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stringReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accumulator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n\n<span class=\"token keyword\">const</span> helloWorld <span class=\"token operator\">=</span> <span class=\"token function\">stringReducer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Hello world!</span></code></pre>\n      </div>\n<h2>Map And Filter As Reducers</h2>\n<p>The other cool thing about reducers is that you can chain them to perform a series of operations on some data. This opens up huge possibilities for composition and reuse of small reducer functions.</p>\n<p>Let’s say you have an ordered array of numbers. You want to get even numbers from it and then multiply by 2.</p>\n<p>The ordinary way to do it would be to use <code class=\"language-text\">.map</code> and <code class=\"language-text\">.filter</code> functions:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>But what if your array had 1000,000 elements? You have to loop through the whole array for every operation, that’s extremely uneffective.</p>\n<p>We need some way to combine the functions we passed to <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code>. But we can’t do this as they have different interface. The function\nthat we passed to <code class=\"language-text\">filter</code> is called <strong>predicate</strong> and it takes a value and returns <strong>True</strong> or <strong>False</strong> depending on inner logic. And the function\nwe passed to <code class=\"language-text\">map</code> is <strong>transformer</strong> function. It takes a value and returns <strong>transformed value</strong>.</p>\n<p>We can achieve this with reducers, let’s create our own <strong>reducer</strong> version of <code class=\"language-text\">.map</code> and <code class=\"language-text\">.filter</code> functions.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      accumulator<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    accumulator<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Great, we used <strong>decorator</strong> functions to wrap our reducers. Now we have <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code> functions that return <strong>reducers</strong> that can be passed to <code class=\"language-text\">Array.reduce()</code> method!</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>Great, now we have a chain of <code class=\"language-text\">.reduce</code> function calls, but we still can’t compose our reducers! Good news is there is only one step left. To be able to compose reducers we need to be able to pass them to each other.</p>\n<h2>Transducers FTW</h2>\n<p>Let’s update our <code class=\"language-text\">filter</code> function so it would also accept <strong>reducer</strong> as an argument. We are going to decompose it and instead of pushing value to <strong>accumulator</strong> we’ll allow\nthe passed in <strong>reducer</strong> to perform it’s logic.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This pattern where we take a <strong>reducer</strong> as an argument and return another <strong>reducer</strong> is called <strong>transducer</strong>. As it’s a combination of <strong>transformer</strong> and <strong>reducer</strong> (we take a reducer and transform it).</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> transducer <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Some logic involving passed in reducer</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>So basically transducer looks like this <code class=\"language-text\">(oneReducer) =&gt; anotherReducer</code>.</p>\n<p>Let’s rewrite our <strong>mapping</strong> reducer as well:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> transformer <span class=\"token operator\">=></span> reducer <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">,</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Also we need to add a final reducer that will push values to array for us:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">finalReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Now we can combine our <strong>mapping</strong> reducer and <strong>filtering</strong> transducer and do our calculations in one run.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">evenPredicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleTransformer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> filterEven <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>evenPredicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mapDouble <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>doubleTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterEven</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapDouble</span><span class=\"token punctuation\">(</span>finalReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Actually we could make our map method a transducer as well and continue this composition indefinitely.</p>\n<p>But just imagine having to compose more than 2 transducers. We have to find more convenient way to compose them.</p>\n<h2>Better Composition</h2>\n<p>Basically we need something that would take a number of functions and compose them in that order.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>fn1<span class=\"token punctuation\">,</span> fn2<span class=\"token punctuation\">,</span> fn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>Luckily a lot of libraries provide this kind of function. For instance <a href=\"http://ramdajs.com/docs/#compose\">RamdaJS</a>. But for educational purposes let’s create our own version.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  functions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>accumulation<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">accumulation</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>The function is very compact, let’s break it down.</p>\n<p>Imagine that we called that function like this <code class=\"language-text\">compose(fn1, fn2, fn3)(x)</code>.</p>\n<p>First look at the <code class=\"language-text\">x =&gt; x</code> part. In lambda calculus it’s called <strong>identity function</strong>. It just returns whatever it takes as an argument without changing. We need it here to start our unfolding.</p>\n<p>So after fist iteration we’ll have that <strong>identity function</strong> (for convenience let’s call it <strong>I</strong>) called with the <strong>fn1</strong> function as an argument:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">accumulation</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// STEP 1</span>\n  <span class=\"token comment\">// We pass our fn1 to accumulation</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">accumulation</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// STEP 2</span>\n  <span class=\"token comment\">// Here we basically substitute accumulation with I</span>\n  <span class=\"token comment\">// and fn and fn1</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>Yay, we calculated the <code class=\"language-text\">accumulation</code> value after the first iteration. Let’s do the second one:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Our new accumulation</span>\n\n  <span class=\"token comment\">// STEP 3</span>\n  <span class=\"token comment\">// Now we pass fn2 to our accumulation</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">accumulation</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Step 4</span>\n  <span class=\"token comment\">// Lets substitute \"accumulation\" with it's current value</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>I think you got the idea. Now just repeat steps 3 and 4 for <code class=\"language-text\">fn3</code> and voila, you’ve converted your <code class=\"language-text\">compose(fn1, fn2, fn3)(x)</code> to <code class=\"language-text\">fn1(fn2(fn3(x)))</code>.</p>\n<p>Now we can compose our <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code> like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>filterEven<span class=\"token punctuation\">,</span>\n                  mapDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2>Conclusion</h2>\n<p>I suppose you already knew about <strong>reducers</strong>, and if not – you’ve learned a nice abstraction to work with collections. Reducers are great to fold different data structures.</p>\n<p>Also you’ve learned how to do your computations effectively using <strong>transducers</strong>.</p>\n<p>{% include subscription_form.html %}</p>","frontmatter":{"title":"Reducers VS Transducers","date":"November 28, 2017"}}},"pathContext":{"slug":"/reducers-vs-transducers/","previous":{"fields":{"slug":"/why-you-should-use-transform-class-properties-plugin/"},"frontmatter":{"title":"Why Should You Use Transform Class Properties Plugin"}},"next":{"fields":{"slug":"/react-native-e2e-tests-with-detox/"},"frontmatter":{"title":"React Native E2E Testing With Detox"}}}}