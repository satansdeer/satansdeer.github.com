{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/basic-karma-js/index.md absPath of file >>> MarkdownRemark","html":"<p><em>Psst, do you write javascript that runs in browser?</em> I have something for you, it’s called <strong>Karma</strong>, you’ll like it.</p>\n<p>When you write javascript code, you have to test it. The same code might work slightly differently in different browsers, so you better test your code at least in most common of them.</p>\n<p>That’s what <strong>Karma</strong> is for.</p>\n<p>Karma is a test runner. It allows you to run your tests in real browsers with real DOM. It can even connect to remote clients and you can test your code on <em>Browserstack</em>.</p>\n<p>That’s not the only benefit you get using Karma. It can speed up your work by watching the files and re-running specs when you save the related files. This will shorten the feedback loop so you’ll have much smoother coding expirience.</p>\n<h2>How does it work?</h2>\n<p><strong>Karma</strong> has two parts, server and client (or clients).</p>\n<p>Server is the main part, it:</p>\n<ul>\n<li>watches your files</li>\n<li>communicates with clients and manages them (through SOCKET connection)</li>\n<li>serves the code and tests to clients (through HTTP)</li>\n<li>reposts test results to you</li>\n</ul>\n<p><img src=\"/assets/images/karma_scheme.png\" alt=\"high level architecture\"></p>\n<p>Client runs tests against the code and reports the results to server.</p>\n<h2>Installation</h2>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install Karma</span>\n$ yarn add karma\n\n<span class=\"token comment\"># To be able to use command \"karma\" install karma-cli</span>\n$ yarn add karma-cli\n\n<span class=\"token comment\"># Install plugins</span>\n$ yarn add karma-jasmine jasmine-core karma-chrome-launcher</code></pre>\n      </div>\n<p>This will install karma and its plugins into <code class=\"language-text\">node_modules</code> in your current working directory and also save these as <code class=\"language-text\">devDependencies</code> in <code class=\"language-text\">package.json</code>.</p>\n<p>Now create the <strong>Karma</strong> config file.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">karma init</code></pre>\n      </div>\n<p>Accept all the defaults. Set source and test files locations as <code class=\"language-text\">js/*.js</code> and <code class=\"language-text\">test/*_spec.js</code>. Here is what I had:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">Which testing framework <span class=\"token keyword\">do</span> you want to use ?\nPress tab to list possible options. Enter to move to the next question.\n<span class=\"token operator\">></span> jasmine\n\nDo you want to use Require.js ?\nThis will add Require.js plugin.\nPress tab to list possible options. Enter to move to the next question.\n<span class=\"token operator\">></span> no\n\nDo you want to capture any browsers automatically ?\nPress tab to list possible options. Enter empty string to move to the next question.\n<span class=\"token operator\">></span> Chrome\n<span class=\"token operator\">></span>\n\nWhat is the location of your <span class=\"token function\">source</span> and <span class=\"token function\">test</span> files ?\nYou can use glob patterns, eg. <span class=\"token string\">\"js/*.js\"</span> or <span class=\"token string\">\"test/**/*Spec.js\"</span><span class=\"token keyword\">.</span>\nEnter empty string to move to the next question.\n<span class=\"token operator\">></span> js/*.js\n<span class=\"token operator\">></span> test/*_spec.js\n<span class=\"token operator\">></span>\n\nShould any of the files included by the previous patterns be excluded ?\nYou can use glob patterns, eg. <span class=\"token string\">\"**/*.swp\"</span><span class=\"token keyword\">.</span>\nEnter empty string to move to the next question.\n<span class=\"token operator\">></span>\n\nDo you want Karma to <span class=\"token function\">watch</span> all the files and run the tests on change ?\nPress tab to list possible options.\n<span class=\"token operator\">></span> <span class=\"token function\">yes</span></code></pre>\n      </div>\n<p>Now <strong>Karma</strong> should say that config file was successfully created.</p>\n<h2>Let’s write some specs!</h2>\n<p>You are probably familiar with the problem we are going to describe with specs. Keep in mind that <strong>Karma</strong> doesn’t give you any functionality to write specs. All those <code class=\"language-text\">describe</code>, <code class=\"language-text\">it</code>, <code class=\"language-text\">expect</code> are coming from <strong>Jasmine</strong>, that we are using as testing framework here.</p>\n<p>Create file <code class=\"language-text\">test/fizzbuzz_spec.js</code> and paste the following contents to it:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fizzbuzz'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#process'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns Fizz if number is divisible by 3'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fizz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fizz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns Buzz if number is divisible by 5'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Buzz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Buzz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns FizzBuzz if number is divisible by both 3 and 5'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FizzBuzz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FizzBuzz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns number itself if number is not divisible by 3 or 5'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fizzbuzz<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This spec represents classic interview question used to weed out the incompetent programmers. No doubt you are familiar with it.</p>\n<p>Now start karma.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ karma start</code></pre>\n      </div>\n<p>It will watch your files and re-run specs if they will change.</p>\n<p>As you don’t have the fizzbuzz module, all four specs should fail.</p>\n<p>Create the file <code class=\"language-text\">js/fizzbuzz.js</code> and paste the following code there:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fizzbuzz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'FizzBuzz'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Fizz'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Buzz'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    process<span class=\"token punctuation\">:</span> process\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>To keep this tutorial dead-simple I defined <code class=\"language-text\">fizzbuzz</code> globally (it will be available from <code class=\"language-text\">window.fizzbuzz</code>) as self-invoking anonymous function.</p>\n<p>It’s the most dumb, simple and straightforward solution I know, but now all the tests should pass.</p>\n<p>While Karma is running, play around with the code. Try to improve the solution. Try to implement it as a one-liner.</p>\n<p>What’s the minimum amount of characters you need to solve this task?</p>\n<p>{% include subscription_form.html %}</p>","frontmatter":{"title":"Basic Karma JS Tutorial","date":"October 08, 2017"}}},"pathContext":{"slug":"/basic-karma-js/","previous":{"fields":{"slug":"/git-add-patch/"},"frontmatter":{"title":"Add Specific Lines With Git Patch"}},"next":{"fields":{"slug":"/dont-mock-what-you-dont-own/"},"frontmatter":{"title":"Don't Mock What You Don't Own"}}}}