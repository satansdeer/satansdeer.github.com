{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/dont-mock-what-you-dont-own/index.md absPath of file >>> MarkdownRemark","html":"<p>I was refactoring specs of some Rails application when I decided to mock the <code class=\"language-text\">ImageUploader</code> class of CarierWave. I wanted to be able to check for cpecific image url. <strong>But was it a good idea?</strong></p>\n<h2>No, Don’t Do It</h2>\n<p>I know it might be tempting to mock libraries that make database or network calls to make specs run faster, but that’s not what test doubles are meant for.</p>\n<p>Test doubles are ment to help you create practical and convinient interfaces between parts of your application.</p>\n<p><img src=\"/assets/images/dont_mock_1.png\" alt=\"mocking\"></p>\n<p>Imagine you have to create some <em>thing</em> that you should integrate in already existing code.</p>\n<p>Using test double you can easily check if the interface of the <em>thing</em> (that is not implemented yet) is clear and easy to use. And if not – it’s cheap to throw it away and start over.</p>\n<p>Now looking from <strong>this perspective</strong> you should see that mocking third-party <em>thing</em> doesn’t make any sense.</p>\n<p>But not only it’s meaningless…</p>\n<h2>Wait, What Perspective?</h2>\n<p>I mean, <strong>TDD is not only about testing</strong>, it’s also about design. Mocking external lib won’t help you to create good design, because you don’t have any control over it.</p>\n<p>The idea is to use mocks as quick and rough prototypes, to see how your <em>thing</em> will be integrated into existing code. If you see that the interface is not very handy – you just write the mock differently, with different methods or with different method signatures.</p>\n<p>So you just prototype your interface first and write your implementation later.</p>\n<p>Now if you apply this logic to mocking external library (which interface you cannot change), you’ll see that it makes zero sense.</p>\n<p>Got it? Let’s continue…</p>\n<h2>It’s Also Harmful</h2>\n<p>Most obvious danger is getting false positives (or negatives, depends on perspective). In other words your test will pass where the actual thing won’t work. Either because you’ve mocked it in a wrong way or the library you were mocking changed slightly after an upgrade.</p>\n<p>Also by mocking an external lib you are binding yourself to a specific implementation and it will be much harder to change the library in the future.</p>\n<p>Another downside is that you might end up with a lot of excessive code that doesn’t bring any value. It can also make it harder to understand what is going on in your code.</p>\n<h2>But HTTP And Database Calls Make My Tests Slow</h2>\n<p>If that’s really a problem – <strong>create wrappers</strong> around that third party <em>thing</em>.</p>\n<p>Don’t forget to write integration tests for that wrappers.</p>\n<p>As a bonus you’ll make it clear what functions of that external lib you <strong>really use</strong>, and it will be much easier to replace that dependency later.</p>\n<h2>Summary</h2>\n<p>In my case I went with using <code class=\"language-text\">ImageUploader</code> directly, writing a wrapper for it would be just crazy.</p>\n<p>I hope this small article will help you avoid this caveat.</p>\n<p>If you are interested in further reading on that topic – here are some more articles:</p>\n<ul>\n<li><a href=\"http://davesquared.net/2011/04/dont-mock-types-you-dont-own.html\">http://davesquared.net/2011/04/dont-mock-types-you-dont-own.html</a></li>\n<li><a href=\"http://www.markhneedham.com/blog/2009/12/13/tdd-only-mock-types-you-own\">http://www.markhneedham.com/blog/2009/12/13/tdd-only-mock-types-you-own</a></li>\n<li><a href=\"http://blog.8thlight.com/eric-smith/2011/10/27/thats-not-yours.html\">http://blog.8thlight.com/eric-smith/2011/10/27/thats-not-yours.html</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1906344/should-you-only-mock-types-you-own\">http://stackoverflow.com/questions/1906344/should-you-only-mock-types-you-own</a></li>\n</ul>","frontmatter":{"title":"Don't Mock What You Don't Own","date":"November 10, 2017"}}},"pathContext":{"slug":"/dont-mock-what-you-dont-own/","previous":{"fields":{"slug":"/basic-karma-js/"},"frontmatter":{"title":"Basic Karma JS Tutorial"}},"next":{"fields":{"slug":"/liskov-substitution-principle/"},"frontmatter":{"title":"Liskov Substitution Principle"}}}}