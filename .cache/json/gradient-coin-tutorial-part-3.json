{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/gradient-coin-tutorial-part-3/index.md absPath of file >>> MarkdownRemark","html":"<p>In <a href=\"http://maksimivanov.com/posts/gradient-coin-tutorial-part-2\">last part</a> we added an auction contract. Now we can buy and sell our GradientTokens. Let’s add some nice UI for that.</p>\n<p>This is what we’ll be building:</p>\n<p><img src=\"/assets/images/gradient_preview.png\" alt=\"gradient token app preview\"></p>\n<h2>Create React App</h2>\n<p>Let’s start by bootstrapping the frontend with <code class=\"language-text\">create-react-app</code>. From your projects root call:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">create-react-app front\ncd front</code></pre>\n      </div>\n<p>Create react app scripts won’t allow importing from outside the <code class=\"language-text\">src</code> folder. Create a symlink to contract artifacts.o</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">ln -s ../../build/contracts src/contracts</code></pre>\n      </div>\n<p>I’m going to use <code class=\"language-text\">truffle-contract</code> as an abstraction over <code class=\"language-text\">web3</code> and <code class=\"language-text\">mobx</code> to manage all the business logic. Install the dependencies:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add mobx mobx-react truffle-contract</code></pre>\n      </div>\n<h2>Update Migrations</h2>\n<p>First, we need to get the deployed contracts addresses. Let’s modify our migration so it will save the addresses to a JSON file.</p>\n<p>First, we’ll deploy <code class=\"language-text\">GradientToken</code> and then pass it’s address to <code class=\"language-text\">TokenAuciton</code> on deploy. After both contracts are deployed – we get their addresses and save to a JSON file in <code class=\"language-text\">front/src</code> folder.</p>\n<p>Make your <code class=\"language-text\">migrations/2_deploy_contract.js</code> look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> GradientToken <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GradientToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> TokenAuction <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TokenAuction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> util <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"util\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> writeFile <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>writeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>deployer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gradientToken <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> deployer<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>GradientToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> auctionContract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> deployer<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>\n    TokenAuction<span class=\"token punctuation\">,</span>\n    GradientToken<span class=\"token punctuation\">.</span>address\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> addresses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    tokenAddress<span class=\"token punctuation\">:</span> GradientToken<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>\n    auctionAddress<span class=\"token punctuation\">:</span> TokenAuction<span class=\"token punctuation\">.</span>address\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"addresses.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>addresses<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Try to run the migrations. If you had them run before - run with <code class=\"language-text\">--reset</code> option.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle migrate --reset</code></pre>\n      </div>\n<p>Check the <code class=\"language-text\">front/src</code> folder. It should have <code class=\"language-text\">addresses.json</code>.</p>\n<h2>Connect To Ethereum Network</h2>\n<p>Now we need to initialize the <code class=\"language-text\">truffle-contract</code>. It needs the <code class=\"language-text\">provider</code> that it will use to connect to ethereum network and contract addresses associated with deployed contracts.</p>\n<p>Create the <code class=\"language-text\">front/src/utils</code> folder and create <code class=\"language-text\">getProvider.js</code> there with following contents:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">import Web3 from &quot;web3&quot;;\n\nconst getProvider = () =&gt; {\n  return new Web3.providers.HttpProvider(&quot;http://localhost:7545&quot;);\n};\n\nexport default getProvider;</code></pre>\n      </div>\n<p>Here we connect directly to our local network. You can also use the provider injected to <code class=\"language-text\">window</code> object by <strong>Metamask</strong>. We’ll just use <code class=\"language-text\">HttpProvider</code> for simplicity.</p>\n<p>Let’s use our <code class=\"language-text\">getProvider</code> function. Create <code class=\"language-text\">front/src/utils/getGradientContractInstance</code> with following content:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> contract <span class=\"token keyword\">from</span> <span class=\"token string\">\"truffle-contract\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> getProvider <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils/getProvider\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GradientTokenArtifact <span class=\"token keyword\">from</span> <span class=\"token string\">\"contracts/GradientToken.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> addresses <span class=\"token keyword\">from</span> <span class=\"token string\">\"../addresses.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tokenAddress <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> addresses<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getGradientContractInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gradientTokenContract <span class=\"token operator\">=</span> <span class=\"token function\">contract</span><span class=\"token punctuation\">(</span>GradientTokenArtifact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gradientTokenContract<span class=\"token punctuation\">.</span><span class=\"token function\">setProvider</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> gradientTokenInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> gradientTokenContract<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>tokenAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> gradientTokenInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Here we initialize <code class=\"language-text\">truffle-contract</code> with JSON artifact, set provider and connect our contract to the deployed instance using the address from <code class=\"language-text\">addresses.json</code>.</p>\n<p>Now we have a utility function to get the contract instance – let’s use the mobx store to store it.</p>\n<p>Create <code class=\"language-text\">front/src/stores/ContractsStore.js</code> with following contents:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> decorate<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> getGradientContractInstance <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils/getGradientContractInstance\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ContractsStore</span> <span class=\"token punctuation\">{</span>\n  gradientTokenInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setGradientTokenInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getGradientContractInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setGradientTokenInstance</span><span class=\"token punctuation\">(</span>gradientTokenInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance <span class=\"token operator\">=</span> gradientTokenInstance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>ContractsStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  gradientTokenInstance<span class=\"token punctuation\">:</span> observable<span class=\"token punctuation\">,</span>\n  setGradientTokenInstance<span class=\"token punctuation\">:</span> action\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The only function of this store is to have an observable reference to <code class=\"language-text\">gradientTokenInstance</code>. Initially it <code class=\"language-text\">null</code> but after <code class=\"language-text\">setup</code> method is called it gets the instance using our <code class=\"language-text\">getGradientContractInstance</code> utility function.</p>\n<p><code class=\"language-text\">gradientTokenInstance</code> is observable so we can derive changes from it in other classes. Let’s create another mobx store.</p>\n<h2>Using The Contract</h2>\n<p>Create file <code class=\"language-text\">front/src/stores/GradientTokenStore</code>. This token will be responsible for accessing contract methods.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> decorate<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> when <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> randomColor <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils/randomColor\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GradientTokenStore</span> <span class=\"token punctuation\">{</span>\n  tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  owner <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>contractsStore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contractsStore <span class=\"token operator\">=</span> contractsStore<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">gradientTokenInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contractsStore <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contractsStore<span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  setup <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>GradientTokenStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  owner<span class=\"token punctuation\">:</span> observable<span class=\"token punctuation\">,</span>\n  tokens<span class=\"token punctuation\">:</span> observable<span class=\"token punctuation\">,</span>\n  isLoading<span class=\"token punctuation\">:</span> observable<span class=\"token punctuation\">,</span>\n  gradientTokenInstance<span class=\"token punctuation\">:</span> computed\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Here we defined the <code class=\"language-text\">gradientTokenInstance</code> getter and made it <code class=\"language-text\">computed</code>. Mobx allows to observe <code class=\"language-text\">observables</code> automatically and create <code class=\"language-text\">computed</code> values based on them. You can read more about it in my <a href=\"http://maksimivanov.com/posts/react-native-mobx-tutorial\">Mobx article</a></p>\n<p>We observe this property in <code class=\"language-text\">constructor</code>, using <code class=\"language-text\">when</code>, so once <code class=\"language-text\">gradientTokenInstance</code> is setup – we call the <code class=\"language-text\">setup</code> method.</p>\n<h2>Getting Owner Address</h2>\n<p>To simplify the process – we’ll only use the address of the contract owner. Update the <code class=\"language-text\">setup</code> function:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">setup <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> owner <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">.</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Create the <code class=\"language-text\">setOwner</code> method we’ve just used, add the <code class=\"language-text\">owner</code> class property with the initial value of <code class=\"language-text\">null</code> and add it to the <code class=\"language-text\">decorate</code> wrapper:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GradientTokenStore</span> <span class=\"token punctuation\">{</span>\n  tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  tokenIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  owner <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ... Other content</span>\n\n  <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>GradientTokenStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  owner<span class=\"token punctuation\">:</span> observable<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... Other content</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2>Fetching Tokens List</h2>\n<p>Add new method <code class=\"language-text\">fetchTokens</code> to <code class=\"language-text\">GradientTokenStore</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">  fetchTokens <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">.</span><span class=\"token function\">tokensOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> gradients <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> token <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getGradient</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gradients<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTokens</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexedTokens</span><span class=\"token punctuation\">(</span>gradients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>First, we call our contract method <code class=\"language-text\">tokensOf</code>. It will return an array of token ids, now we need to get associated gradients. We call the <code class=\"language-text\">getGradient</code> method for every id. And in order to wait until all the promises will be resolved - we wrap it into <code class=\"language-text\">Promise.all</code></p>\n<p>After gradients are loaded - we update the <code class=\"language-text\">isLoading</code> attribute, and if <code class=\"language-text\">gradients</code> array is not empty we call the <code class=\"language-text\">setTokens</code> method. <code class=\"language-text\">setTokens</code> is trivial it is just a mobx action that sets the <code class=\"language-text\">tokens</code> attribute:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The <code class=\"language-text\">indexedTokens</code> just adds an index to every gradient – it’s needed for <code class=\"language-text\">React</code>. We are going to show our tokens in a list. And list elements in react should have unique <code class=\"language-text\">key</code> prop:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">indexedTokens</span><span class=\"token punctuation\">(</span>gradients<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> gradients<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>gradient <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      gradient<span class=\"token punctuation\">,</span>\n      index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenIndex<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h2>Minting New Tokens</h2>\n<p>Now we can show the list of tokens but we can’t create new ones. Let’s fix it, add the <code class=\"language-text\">mintToken</code> method to our <code class=\"language-text\">GradientsTokenStore</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">mintToken <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gradient <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#000'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gradientTokenInstance<span class=\"token punctuation\">.</span><span class=\"token function\">mint</span><span class=\"token punctuation\">(</span>gradient<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> gradient<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">,</span>\n    gas<span class=\"token punctuation\">:</span> <span class=\"token number\">170000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gradient<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenIndex<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Here I hardcoded the black and white gradient for simplicity.</p>\n<p>Important note, here we call the transaction using <code class=\"language-text\">httpProvider</code>. Transactions require gas. As we don’t use any kind of wallet here that would automatically calculate the required amount of gas – we set it manually.</p>\n<p>After the <code class=\"language-text\">mint</code> method was executed – we append the token to our list of tokens and provide an index to use in react list.</p>\n<p>Add the <code class=\"language-text\">appendToken</code> method:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">appendToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h2>Initializing Stores</h2>\n<p>Great, we are almost done with our business logic. Now we need to instantiate our stores. Create file <code class=\"language-text\">front/src/stores/index.js</code> with following contents:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ContractsStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ContractsStore\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GradientTokenStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"./GradientTokenStore\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> contractsStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContractsStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontractsStore<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> gradientTokenStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GradientTokenStore</span><span class=\"token punctuation\">(</span>contractsStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  contractsStore<span class=\"token punctuation\">,</span>\n  gradientTokenStore\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Now modify your <code class=\"language-text\">src/App.js</code> to inject our stores into the app.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TokensPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TokensPage\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> stores <span class=\"token keyword\">from</span> <span class=\"token string\">\"./stores\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./App.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Provider <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>stores<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>TokensPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Now our stores will be available from any of the react views.</p>\n<p>Making the views is trivial if you are interested – you can check out <a href=\"https://github.com/satansdeer/gradient-token\">the repo</a></p>","frontmatter":{"title":"CryptoKitties Clone Part 3 Adding Frontend","date":"March 28, 2018"}}},"pathContext":{"slug":"/gradient-coin-tutorial-part-3/","previous":{"fields":{"slug":"/react-state/"},"frontmatter":{"title":"React 16 Course - Managing State"}},"next":{"fields":{"slug":"/static-type-checking-js/"},"frontmatter":{"title":"Do You Need Static Type Checking?"}}}}