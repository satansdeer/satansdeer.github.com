{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"/Users/satansdeersatansdeer/Workspace/satansdeer.github.com/src/pages/ethereum-react-dapp-tutorial/index.md absPath of file >>> MarkdownRemark","html":"<p>ICOâ€™s, crypto, blockchain, dapps. Everyone is discussing it nowadays (or at leas heard). Today Iâ€™m going to show you how to create your first distributed app on Ethereum blockchain, using ReactJS.</p>\n<p>This article has two parts:</p>\n<ul>\n<li><a href=\"#\">How to create ERC20 token (this one)</a></li>\n<li><a href=\"/posts/ethereum-react-dapp-tutorial-part-2\">How to create ReactJS frontend for your DAPP</a></li>\n</ul>\n<p>In the end of second article Iâ€™ll provide a github repo with this project.</p>\n<h2>What Are We Going To Build</h2>\n<p>Weâ€™ll create our own token that will conform the <a href=\"https://theethereum.wiki/w/index.php/ERC20_Token_Standard\">ERC20</a> token standard. Weâ€™ll create a wallet application using ReactJS, that will allow you to play arount with your token using browser with <a href=\"https://metamask.io/\">ðŸ¦Š Metamask</a> extension.</p>\n<p><img src=\"/assets/images/react_ethereum_result.png\" alt=\"Result\"></p>\n<p>Weâ€™ll use <a href=\"http://truffleframework.com/\">Truffle</a> to compile and deploy our token, <a href=\"http://truffleframework.com/ganache/\">Ganache</a> to set up the test blockchain aNd <a href=\"http://truffleframework.com/docs/drizzle/getting-started\">Drizzle</a> to integrate all this with ReactJS frontend.</p>\n<p><img src=\"/assets/images/truffle_ganache_drizzle.png\" alt=\"Truffle Ganache Drizzle\"></p>\n<h2>About ERC20</h2>\n<p>ERC20 basically represents fungible token, that means that any token of this kind is equal to any other token of this kind. Like 1$ is always equal to 1$.</p>\n<p>Overall this standard reqires to have 6 methods and 2 events defined.</p>\n<p>3 of those methods are totally necessary to make a fungible token and a remaining 3 are needed to make it ERC20 compliant (they are needed to do automatic transactions).</p>\n<h3>Super Necessary Fungible Token Methods</h3>\n<p>So if you want to have a coin â€“ you need to know how many coins exist in total, how many coins are in this particular wallet and be able to transfer those coins from one wallet to another. Thatâ€™s practically it and thatâ€™s what those 3 essential functions do.</p>\n<ul>\n<li><code class=\"language-text\">totalSupply</code> returns total amount of existing tokens.</li>\n<li><code class=\"language-text\">balanceOf</code> accepts wallet address and returns balance of this wallet</li>\n<li><code class=\"language-text\">transfer</code> accepts receivers wallet address and amount of tokens to transfer</li>\n</ul>\n<p>Also it needs to define the <code class=\"language-text\">Transfer</code> event that tells <em>who</em> sent <em>what amount of tokens</em> to <em>who</em>.</p>\n<p>As you can see, no magic here, and itâ€™s totally understandable why do you need to have such methods.</p>\n<h3>Remaining Methods</h3>\n<p>Those methods are needed to execute automated transactions. Like recurring payments, or payments based on some external event. For instance you could make a subscription service based completely on blockchain.</p>\n<ul>\n<li><code class=\"language-text\">allowance</code> accepts owner and spender wallet addresses and returns the amount of tokens allowed to spender to withdraw automatically.</li>\n<li><code class=\"language-text\">approve</code> accepts spenders wallet address and amount of tokens. Sets the amount of tokens allowed to for given spender.</li>\n<li><code class=\"language-text\">transferFrom</code> gets address <em>from</em>, address <em>to</em> and amount of tokens to transfer. Executes transfer within limit allowed by the owner of <em>from</em> address.</li>\n</ul>\n<p>Also it needs to define the <code class=\"language-text\">Approval</code> that tells that some amount of tokens are approved for some spender.</p>\n<h2>Setting Up</h2>\n<p>To write our contract we need local blockchain and an wallet that will allow us to test the DAPP locally.</p>\n<p>First install the <a href=\"https://metamask.io/\">ðŸ¦Š Metamask</a> browser extension. Weâ€™ll need it to interact with our contract in browser.</p>\n<p>For local ethereum blockchain I recommend <a href=\"http://truffleframework.com/ganache/\">Ganache</a>. Go and download version for your OS.</p>\n<p>Now install Truffle and initialize new project:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">npm install -g truffle\nmkdir ethereum-token-tutorial\ncd ethereum-token-tutorial\nyarn init\ntruffle init</code></pre>\n      </div>\n<p><code class=\"language-text\">truffle init</code> will install all required dependencies and generate 3 folders:</p>\n<ul>\n<li><code class=\"language-text\">contracts</code> - contain actual contracts. Our token contract will be here.</li>\n<li><code class=\"language-text\">migrations</code> - migrations are js scripts that deploy your contracts to ethereum network.</li>\n<li><code class=\"language-text\">test</code> - folder for your tests. JS and Solidity. </li>\n</ul>\n<h2>Writing Contract</h2>\n<p>We are going to use ERC20 token template provided by <a href=\"https://zeppelin.solutions/\">Zeppelin</a>. It already provides all the required methods weâ€™ll only have to set the name, symbol for our token.</p>\n<p>Install Zeppelin templates and create new contract file:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">yarn add zeppelin-solidity\ntouch contracts/TutorialCoin.sol</code></pre>\n      </div>\n<p>Edit tutorial token contract file so it will look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.4</span><span class=\"token number\">.17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol'</span><span class=\"token punctuation\">;</span>\n\ncontract TutorialToken is StandardToken <span class=\"token punctuation\">{</span>\n  string <span class=\"token keyword\">public</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'TutorialToken'</span><span class=\"token punctuation\">;</span>\n  string <span class=\"token keyword\">public</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">'TUT'</span><span class=\"token punctuation\">;</span>\n  uint8 <span class=\"token keyword\">public</span> decimals <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  uint <span class=\"token keyword\">public</span> INITIAL_SUPPLY <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">TutorialToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    totalSupply_ <span class=\"token operator\">=</span> INITIAL_SUPPLY<span class=\"token punctuation\">;</span>\n    balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INITIAL_SUPPLY<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Name and symbol allow to identify our token, decimals â€“ determines the minimal fraction of the token. In this case itâ€™s 1/100 like cents for $.</p>\n<p><code class=\"language-text\">total_supply_</code> is provided by <a href=\"https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\">BasicToken</a> and defines total number of tokens in existence.</p>\n<p>In our constructor function <code class=\"language-text\">TutorialToken()</code> we set <code class=\"language-text\">total_supply_</code> equal to <code class=\"language-text\">INITIAL_SUPPLY</code> and assign all newly emitted tokens to the wallet that initiated contract execution.</p>\n<p>Thatâ€™s it, now you have your own token. Letâ€™s deploy it.</p>\n<h3>Compiling And Deploying</h3>\n<p>Create file <code class=\"language-text\">2_deploy_contract.js</code> in <code class=\"language-text\">migrations</code> folder:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> TutorialToken <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TutorialToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>deployer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  deployer<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>TutorialToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>If you havenâ€™t done it yet â€“ download <a href=\"http://truffleframework.com/ganache/\">Ganache</a> and run it. It will start on <code class=\"language-text\">7545</code> port by default.</p>\n<p><img src=\"/assets/images/ganache.png\" alt=\"Ganache\"></p>\n<p>Now go back to terminal and compile your contract:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle compile</code></pre>\n      </div>\n<p>Now to be able to deploy contract to local network â€“ in your projects root create <code class=\"language-text\">truffle.js</code> with following content:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  networks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    development<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token punctuation\">:</span> <span class=\"token number\">7545</span><span class=\"token punctuation\">,</span>\n      network_id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token comment\">// Match any network id</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>As we set only one network â€“ truffle will use it by default. Run the migrations.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">truffle migrate</code></pre>\n      </div>\n<p>After successful migration you should see new transactions in Ganache:</p>\n<p><img src=\"/assets/images/ganache_2.png\" alt=\"Ganache\"></p>\n<p>Awesome, your contract is now up and running, letâ€™s make simple React app to interact with your token.</p>\n<p>See you in the next part, where weâ€™ll set up frontend and send our tokens between wallets.</p>\n<p>To not miss the article â€“ subscribe to my mailing list:</p>\n<p>\n  <div id=\"root\"></div>\n  <script type=\"text/javascript\" src=\"/assets/javascripts/bundle.js\" charset=\"utf-8\"></script>\n</p>","frontmatter":{"title":"Ethereum Distributed App With React Tutorial","date":"February 13, 2018"}}},"pathContext":{"slug":"/ethereum-react-dapp-tutorial/","previous":{"fields":{"slug":"/ethereum-react-dapp-tutorial-part-2/"},"frontmatter":{"title":"Ethereum Distributed App With React Tutorial â€“ Part 2"}},"next":{"fields":{"slug":"/quick-voronoi-example/"},"frontmatter":{"title":"Quick D3 Voronoi Example"}}}}